/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/__root';
import { Route as IndexImport } from './app/index';
import { Route as CommunitiesCommunityNameImport } from './app/communities.$communityName';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const CommunitiesCommunityNameRoute = CommunitiesCommunityNameImport.update({
  id: '/communities/$communityName',
  path: '/communities/$communityName',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/communities/$communityName': {
      id: '/communities/$communityName';
      path: '/communities/$communityName';
      fullPath: '/communities/$communityName';
      preLoaderRoute: typeof CommunitiesCommunityNameImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/communities/$communityName': typeof CommunitiesCommunityNameRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/communities/$communityName': typeof CommunitiesCommunityNameRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/communities/$communityName': typeof CommunitiesCommunityNameRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/communities/$communityName';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/communities/$communityName';
  id: '__root__' | '/' | '/communities/$communityName';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CommunitiesCommunityNameRoute: typeof CommunitiesCommunityNameRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommunitiesCommunityNameRoute: CommunitiesCommunityNameRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/communities/$communityName"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/communities/$communityName": {
      "filePath": "communities.$communityName.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
