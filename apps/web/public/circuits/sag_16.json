{
  "noir_version": "1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a",
  "hash": 6508105309507002017,
  "abi": {
    "parameters": [
      {
        "name": "signature",
        "type": {
          "kind": "struct",
          "path": "noir_ring_signatures::sag::Signature",
          "fields": [
            { "name": "c0", "type": { "kind": "field" } },
            {
              "name": "s",
              "type": {
                "kind": "struct",
                "path": "std::collections::bounded_vec::BoundedVec",
                "fields": [
                  {
                    "name": "storage",
                    "type": {
                      "kind": "array",
                      "length": 16,
                      "type": { "kind": "field" }
                    }
                  },
                  {
                    "name": "len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ]
              }
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "hashed_message",
        "type": { "kind": "field" },
        "visibility": "private"
      },
      {
        "name": "ring",
        "type": {
          "kind": "struct",
          "path": "std::collections::bounded_vec::BoundedVec",
          "fields": [
            {
              "name": "storage",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                  "fields": [
                    { "name": "x", "type": { "kind": "field" } },
                    { "name": "y", "type": { "kind": "field" } },
                    { "name": "is_infinite", "type": { "kind": "boolean" } }
                  ]
                }
              }
            },
            {
              "name": "len",
              "type": { "kind": "integer", "sign": "unsigned", "width": 32 }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": { "kind": "boolean" },
      "visibility": "public"
    },
    "error_types": {
      "2763232959425933230": {
        "error_kind": "string",
        "string": "Attempted to write past end of BoundedVec"
      },
      "6485997221020871071": {
        "error_kind": "string",
        "string": "call to assert_max_bit_size"
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "16": {
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n",
      "path": "std/embedded_curve_ops.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "20": {
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "65": {
      "source": "//! Implementation of the SAG (Signature of Anonymous Group) ring signature scheme\n//! using the Grumpkin curve and Pedersen hash function.\n//!\n//! Ring signatures allow a member of a group to sign a message on behalf of the group\n//! without revealing which member actually created the signature. This provides\n//! anonymity for the signer while still proving that the signature came from a member\n//! of the specified group.\n\nuse std::embedded_curve_ops::{\n    embedded_curve_add, EmbeddedCurvePoint, EmbeddedCurvePoint as Point,\n    EmbeddedCurveScalar as Scalar, fixed_base_scalar_mul, multi_scalar_mul,\n};\n\nuse std::hash::pedersen_hash;\n\n/// Represents a SAG ring signature\n///\n/// # Type Parameters\n/// * `MaxRingSize`: The maximum number of public keys that can be in the ring\npub struct Signature<let MaxRingSize: u32> {\n    /// The initial challenge value c0\n    c0: Field,\n    /// Vector of response values s_i for each ring member\n    s: BoundedVec<Field, MaxRingSize>,\n}\n\n/// Verifies a SAG ring signature\n///\n/// # Arguments\n/// * `signature`: The ring signature to verify\n/// * `hashed_message`: The hash of the message being signed\n/// * `ring`: The set of public keys forming the ring\n///\n/// # Returns\n/// * `true` if the signature is valid, `false` otherwise\n///\n/// # Algorithm Steps\n/// 1. Initialize the challenge vector C with c0\n/// 2. For each public key K_i in the ring:\n///    a. Compute s_iG (scalar multiplication of response s_i with generator G)\n///    b. Compute c_iK_i (scalar multiplication of challenge c_i with public key K_i)\n///    c. Add s_iG and c_iK_i to get a point on the curve\n///    d. Hash the resulting point coordinates with the message to get next challenge\n/// 3. Verify that the final challenge matches the initial c0\npub fn verify<let MaxRingSize: u32>(\n    signature: Signature<MaxRingSize>,\n    hashed_message: Field,\n    ring: BoundedVec<Point, MaxRingSize>,\n) -> bool {\n    // Initialize challenge vector with c0\n    let mut C: BoundedVec<Field, MaxRingSize> = BoundedVec::from_array([0; MaxRingSize]);\n    C.set(0, signature.c0);\n\n    // Process each public key in the ring\n    for i in 0..MaxRingSize {\n        if (i < ring.len()) {\n            // Get the current public key\n            let K = ring.get(i);\n\n            // Convert response s_i to scalar and compute s_iG\n            let s: Scalar = Scalar::from_field(signature.s.get(i));\n            let sG = fixed_base_scalar_mul(s);\n\n            // Convert challenge c_i to scalar and compute c_iK_i\n            let c: Scalar = Scalar::from_field(C.get(i));\n            let cK = multi_scalar_mul([K], [c]);\n\n            // Add s_iG and c_iK_i\n            let sG_cK = embedded_curve_add(sG, cK);\n\n            // Hash the result with the message to get next challenge\n            let hash = pedersen_hash([sG_cK.x, sG_cK.y, hashed_message]);\n\n            // Set the next challenge value\n            C.set((i + 1) % ring.len(), hash);\n        }\n    }\n\n    // Verify the final challenge matches the initial c0\n    C.get(0) == signature.c0\n}\n\n#[test]\nfn test_verify_ring_signature() {\n    let pub_1: Point = Point {\n        x: 0x22c8217d4b526f2c721b32074e7151576aa3a579497c0800134e0a3ece8e7035,\n        y: 0x1e6dc2ce95e96fe93708b56eaa6d2a7d464f95c93e01dc90a47e730442c8cc79,\n        is_infinite: false,\n    };\n\n    let pub_2: Point = Point {\n        x: 0x0bc5b4722e091a1cf7b2f83538dd49eecaab880f94ae4896827db49ed5192338,\n        y: 0x2982b8e604e3aab3aef8c0c734729821dcc0a2e07d6e7143cbd4046e9b9d38be,\n        is_infinite: false,\n    };\n\n    let hashed_message: Field = 0x02a01608cf87d67da4d795a3fdf13d8bbd61892145a973de448fa67f9234dbcf;\n\n    let c0: Field = 0x15245dc24971c6b1f18309594b32d8b46bca105aa3a0420baccda838887a9fae;\n\n    let s: BoundedVec<Field, 2> = BoundedVec::from_array([\n        0x1091edb9186a35a7fe3a63cf56510a75b572be07832e26f071fa7c98da8aa7e7,\n        0x27c73e80fb7996af327ee1cbc6fd9167c5d03e79d8d6f75ad6d1b8923df611c1,\n    ]);\n\n    let signature: Signature<2> = Signature { c0, s };\n    let ring: BoundedVec<EmbeddedCurvePoint, 2> = BoundedVec::from_array([pub_1, pub_2]);\n\n    let res: bool = verify(signature, hashed_message, ring);\n\n    assert(res == true);\n}\n",
      "path": "/Users/envoy1084/nargo/github.com/zkpersona/noir-ring-signatures/v0.1.0/lib/src/sag.nr"
    },
    "69": {
      "source": "use noir_ring_signatures::sag::{Signature, verify};\nuse std::embedded_curve_ops::EmbeddedCurvePoint;\n\npub global MAX_RING_SIZE: u32 = 16;\n\npub fn main(\n    signature: Signature<MAX_RING_SIZE>,\n    hashed_message: Field,\n    ring: BoundedVec<EmbeddedCurvePoint, MAX_RING_SIZE>,\n) -> pub bool {\n    verify(signature, hashed_message, ring)\n}\n",
      "path": "/Users/envoy1084/Projects/Core/ring-forum/crates/sag_16/src/main.nr"
    }
  },
  "names": ["main"],
  "brillig_names": [
    "decompose_hint",
    "lte_hint",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
